# --- ржмрж┐ржнрж╛ржЧ рзз: ржкрзНрж░рзЯрзЛржЬржирзАрзЯ рж▓рж╛ржЗржмрзНрж░рзЗрж░рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ---
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from supabase import create_client, Client

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ, ржпрж╛рждрзЗ рж╕рж╛рж░рзНржнрж╛рж░рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ рждрж╛ рж╕рж╣ржЬрзЗржЗ ржмрзЛржЭрж╛ ржпрж╛рзЯ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- ржмрж┐ржнрж╛ржЧ рзи: ржЖржкржирж╛рж░ ржжрзЗржУрзЯрж╛ рждржерзНржп ржПржмржВ ржбрзЗржЯрж╛ржмрзЗрж╕ рж╕ржВржпрзЛржЧ ---
# Supabase рж╕ржВржпрзЛржЧрзЗрж░ рждржерзНржп
SUPABASE_URL = "https://dzyyqvpzqspaarizvlly.supabase.co"
SUPABASE_SERVICE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImR6eXlxdnB6cXNwYWFyaXp2bGx5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTY2OTM2MywiZXhwIjoyMDcxMjQ1MzYzfQ.7PInJsA5WFnV_Vu9VGCrF16dXS695gXat0L2W8fG51A"

# ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмржЯ ржЯрзЛржХрзЗржи
TELEGRAM_BOT_TOKEN = "8382556728:AAHtxUaLDcnGzPAdY2gUy2rwbgMvqJVh4nA"

# ржЖржкржирж╛рж░ ржмрзНрж▓ржЧрж╛рж░ рж╕рж╛ржЗржЯрзЗрж░ URL
WEB_APP_URL = "https://pepe-coin.blogspot.com/"

# Supabase ржХрзНрж▓рж╛рзЯрзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
    logger.info("Supabase ржбрзЗржЯрж╛ржмрзЗрж╕рзЗрж░ рж╕рж╛ржерзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржи рж╣рзЯрзЗржЫрзЗред")
except Exception as e:
    logger.error(f"Supabase рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржирзЗ ржорж╛рж░рж╛рждрзНржоржХ рждрзНрж░рзБржЯрж┐: {e}")
    # рж╕ржВржпрзЛржЧ рж╕рзНржерж╛ржкржи ржирж╛ рж╣рж▓рзЗ ржмржЯ ржЪрж╛рж▓рзБ рж╣ржмрзЗ ржирж╛
    exit()


# --- ржмрж┐ржнрж╛ржЧ рзй: '/start' ржХржорж╛ржирзНржбрзЗрж░ ржорзВрж▓ ржлрж╛ржВрж╢ржи ---
# ржпржЦржи ржХрзЛржирзЛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржмржЯржХрзЗ '/start' ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржмрзЗ, рждржЦржи ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржХрж╛ржЬ ржХрж░ржмрзЗ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    new_user_id = user.id
    
    try:
        # ржзрж╛ржк ржХ: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржЖржЧрзЗ ржерзЗржХрзЗржЗ ржЖржЫрзЗ ржХрж┐ржирж╛ рждрж╛ ржЪрзЗржХ ржХрж░рж╛
        response = supabase.table('users').select('user_id').eq('user_id', new_user_id).execute()

        # ржзрж╛ржк ржЦ: ржпржжрж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржирждрзБржи рж╣рзЯ (ржЕрж░рзНржерж╛рзО ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ рждрж╛ржХрзЗ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржирж╛ ржпрж╛рзЯ)
        if not response.data:
            logger.info(f"ржирждрзБржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╕ржирж╛ржХрзНржд рж╣рзЯрзЗржЫрзЗ: ID={new_user_id}, Username=@{user.username}")
            
            # ржзрж╛ржк ржЧ: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржХрж┐ ржХрж╛рж░рзЛ рж░рзЗржлрж╛рж░рзЗрж▓рзЗ ржПрж╕рзЗржЫрзЗ рждрж╛ ржЪрзЗржХ ржХрж░рж╛
            referrer_id = None
            if context.args and len(context.args) > 0:
                try:
                    # /start ржПрж░ ржкрж░рзЗ ржерж╛ржХрж╛ ржЖржЗржбрж┐ржЯрж┐ржХрзЗ рж╕ржВржЦрзНржпрж╛рзЯ ржкрж░рж┐ржгржд ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛
                    referrer_id = int(context.args[0])
                    logger.info(f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {new_user_id} рж░рзЗржлрж╛рж░рж╛рж░ {referrer_id} ржПрж░ ржорж╛ржзрзНржпржорзЗ ржПрж╕рзЗржЫрзЗржиред")
                except ValueError:
                    referrer_id = None
                    logger.warning(f"ржЕржмрзИржз рж░рзЗржлрж╛рж░рзЗрж▓ ржХрзЛржб ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ: {context.args[0]}")

            # ржзрж╛ржк ржШ: ржпржжрж┐ ржПржХржЬржи ржмрзИржз рж░рзЗржлрж╛рж░рж╛рж░ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ ржПржмржВ рж╕рзЗ ржирж┐ржЬрзЗ ржирж┐ржЬрзЗржХрзЗ рж░рзЗржлрж╛рж░ ржирж╛ ржХрж░рзЗ
            if referrer_id and referrer_id != new_user_id:
                # рж░рзЗржлрж╛рж░рж╛рж░рзЗрж░ рждржерзНржп ржбрзЗржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
                referrer_response = supabase.table('users').select('points', 'referral_count').eq('user_id', referrer_id).execute()
                
                if referrer_response.data:
                    # рж░рзЗржлрж╛рж░рж╛рж░ржХрзЗ ржмрзЛржирж╛рж╕ ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
                    current_points = referrer_response.data[0]['points']
                    current_referrals = referrer_response.data[0]['referral_count']
                    
                    new_points = current_points + 10  # рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕ ржкрзЯрзЗржирзНржЯ
                    new_referral_count = current_referrals + 1
                    
                    # ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ рж░рзЗржлрж╛рж░рж╛рж░рзЗрж░ ржирждрзБржи рждржерзНржп ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
                    supabase.table('users').update({
                        'points': new_points,
                        'referral_count': new_referral_count
                    }).eq('user_id', referrer_id).execute()
                    logger.info(f"рж░рзЗржлрж╛рж░рж╛рж░ {referrer_id} ржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмрзЛржирж╛рж╕ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред ржирждрзБржи ржкрзЯрзЗржирзНржЯ: {new_points}, ржирждрзБржи рж░рзЗржлрж╛рж░рзЗрж▓ рж╕ржВржЦрзНржпрж╛: {new_referral_count}")

            # ржзрж╛ржк ржЩ: ржирждрзБржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржпрзЛржЧ ржХрж░рж╛
            supabase.table('users').insert({
                'user_id': new_user_id,
                'username': user.username,
                'points': 0,
                'referral_count': 0
            }).execute()
            logger.info(f"ржирждрзБржи ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {new_user_id} ржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред")

    except Exception as e:
        logger.error(f"/start ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛рж░ рж╕ржорзЯ ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")

    # рж╕ржм ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗржЗ (ржирждрзБржи ржмрж╛ ржкрзБрж░рж╛рждржи) ржУрзЯрзЗржм ржЕрзНржпрж╛ржк ржЦрзЛрж▓рж╛рж░ ржмрж╛ржЯржирж╕рж╣ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗ
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯЪА Open App & Start Collecting", web_app=WebAppInfo(url=WEB_APP_URL))]
    ])
    
    await update.message.reply_text(
        "Welcome to Pepe Coin! ЁЯР╕\n\nClick the button below to open the app and start collecting points!",
        reply_markup=keyboard
    )


# --- ржмрж┐ржнрж╛ржЧ рзк: ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржорзВрж▓ ржЕржВрж╢ ---
def main() -> None:
    """ржмржЯржЯрж┐ рж╢рзБрж░рзБ ржПржмржВ ржЪрж╛рж▓рзБ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп ржорзВрж▓ ржлрж╛ржВрж╢ржиред"""
    
    # ApplicationBuilder ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржмржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # ржмржЯржХрзЗ ржмрж▓рж╛ рж╣ржЪрзНржЫрзЗ ржпрзЗ /start ржХржорж╛ржирзНржб ржкрзЗрж▓рзЗ ржЙржкрж░рзЗрж░ 'start' ржлрж╛ржВрж╢ржиржЯрж┐ ржЪрж╛рж▓рж╛рждрзЗ рж╣ржмрзЗ
    application.add_handler(CommandHandler("start", start))

    logger.info("ржмржЯ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
    
    # ржмржЯржЯрж┐ ржорзЗрж╕рзЗржЬрзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╢рзБрж░рзБ ржХрж░ржмрзЗ
    application.run_polling()

if __name__ == '__main__':
    main()
